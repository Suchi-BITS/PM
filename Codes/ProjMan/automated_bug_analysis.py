# -*- coding: utf-8 -*-
"""Automated_BUG_analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rFAnZlVcIhcoUjZaQIwuFmmFCON6WB4Y
"""

import os
import re
import pandas as pd
import requests
from dotenv import load_dotenv

# Load environment variables
load_dotenv()
GITHUB_API_TOKEN = os.getenv("GITHUB_API_TOKEN")
GITHUB_REPO = os.getenv("GITHUB_REPO")
BUG_TRACKER_URL = os.getenv("BUG_TRACKER_URL")

# Function to fetch recent bug reports from GitHub Issues
def fetch_github_issues():
    url = f"https://api.github.com/repos/{GITHUB_REPO}/issues"
    headers = {"Authorization": f"Bearer {GITHUB_API_TOKEN}"}
    response = requests.get(url, headers=headers)

    if response.status_code == 200:
        return response.json()
    else:
        print("Failed to fetch GitHub issues")
        return []

# Function to analyze error logs
def analyze_logs(logs):
    error_patterns = {
        "NullPointerException": "Possible null reference. Check object initialization.",
        "IndexOutOfBoundsException": "Check array or list index bounds.",
        "SyntaxError": "Check syntax correctness in the specified file.",
    }

    suggestions = []
    for log in logs:
        for error, suggestion in error_patterns.items():
            if re.search(error, log):
                suggestions.append((log, suggestion))

    return suggestions

# AI-based bug fixing using OpenAI API
def ai_suggest_fix(error_log):
    openai_api_key = os.getenv("OPENAI_API_KEY")
    url = "https://api.openai.com/v1/completions"
    headers = {"Authorization": f"Bearer {openai_api_key}", "Content-Type": "application/json"}
    data = {
        "model": "gpt-4",
        "prompt": f"Analyze the following error and suggest a fix: {error_log}",
        "max_tokens": 100
    }
    response = requests.post(url, headers=headers, json=data)

    if response.status_code == 200:
        return response.json().get("choices", [{}])[0].get("text", "No suggestion available")
    else:
        return "Failed to get AI suggestion"

# Example logs to analyze
sample_logs = [
    "Error: NullPointerException at line 45 in main.py",
    "Warning: IndexOutOfBoundsException in module data_loader.py",
    "Critical: SyntaxError detected in config.json"
]

# Perform analysis
bug_suggestions = analyze_logs(sample_logs)

df = pd.DataFrame(bug_suggestions, columns=["Error Log", "Suggested Fix"])

# AI-based fix suggestions
df["AI Suggested Fix"] = df["Error Log"].apply(ai_suggest_fix)

print(df)